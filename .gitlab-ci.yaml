stages:
  - lint
  - tests
  - build

.checked:
  before_script:
    - docker-compose build checks

flake8:
  extends: .checked
  stage: lint
  script:
    - docker-compose -p flake8 run --rm flake8

mypy:
  extends: .checked
  stage: lint
  script:
    - docker-compose -p mypy run --rm mypy

pytest:
  extends: .checked
  stage: tests
  script:
    - docker-compose -p pytest run --rm pytest

.tagged:
  before_script:
    - if [[ ${CI_COMMIT_REF_NAME} = 'master' ]]; then export TAG=build_${CI_COMMIT_SHORT_SHA}; else export TAG=${CI_COMMIT_TAG}; fi

image: registry.evo.dev/platform/k8s-deploy:latest
build_stg:
  extends: .tagged
  stage: build
  only:
    - master
  script:
    - docker pull $CI_REGISTRY_IMAGE/frontend:latest || true
    - docker build -f docker/frontend.dockerfile --target stg -t $CI_REGISTRY_IMAGE/frontend:latest --cache-from $CI_REGISTRY_IMAGE/frontend:latest -t $CI_REGISTRY_IMAGE/frontend:build_${CI_COMMIT_SHORT_SHA} .
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:build_${CI_COMMIT_SHORT_SHA}
    - docker volume create build
    - docker run -t --rm -v build:/app/build $CI_REGISTRY_IMAGE/frontend:latest npm run build-stg
    - docker run -t --rm -v build:/app/build -w /app -e ACCESS_KEY=$ACCESS_KEY_STG -e SECRET_KEY=$SECRET_KEY_STG registry.evo.dev/platform/builders/static staging upload hackaton /app/build
    - CID=$(docker run -d -v build:/app/build -w /app busybox true)
    - docker cp $CID:/app/build build
    - docker container rm -f $CID
    - docker volume rm -f build
    - docker build -f docker/backend.dockerfile --target stg -t $CI_REGISTRY_IMAGE/backend:$TAG .
    - docker push $CI_REGISTRY_IMAGE/backend:$TAG
build_prd:
  extends: .tagged
  stage: build
  only:
    - /^v\d+.\d+.\d+.\d+$/
    - /^v\d+.\d+.\d+(.\d+)?$/
  script:
    - docker pull $CI_REGISTRY_IMAGE/frontend:latest || true
    - docker build -f docker/frontend.dockerfile --target prd -t $CI_REGISTRY_IMAGE/frontend:latest --cache-from $CI_REGISTRY_IMAGE/frontend:latest -t $CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_TAG} .
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
    - docker push $CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_TAG}
    - docker volume create build
    - docker run -t --rm -v build:/app/build $CI_REGISTRY_IMAGE/frontend:latest npm run build-prd
    - docker run -t --rm -v build:/app/build -w /app -e ACCESS_KEY=$ACCESS_KEY_PRD -e SECRET_KEY=$SECRET_KEY_PRD registry.evo.dev/platform/builders/static production upload hackaton /app/build
    - CID=$(docker run -d -v build:/app/build -w /app busybox true)
    - docker cp $CID:/app/build build
    - docker container rm -f $CID
    - docker volume rm -f build
    - docker pull $CI_REGISTRY_IMAGE/backend:latest || true
    - docker build -f docker/backend.dockerfile --target prd -t $CI_REGISTRY_IMAGE/backend:latest --cache-from $CI_REGISTRY_IMAGE/backend:latest -t $CI_REGISTRY_IMAGE/backend:$TAG .
    - docker push $CI_REGISTRY_IMAGE/backend:latest
    - docker push $CI_REGISTRY_IMAGE/backend:$TAG